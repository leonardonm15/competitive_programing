#include <bits/stdc++.h>
using namespace std;

#define endl '\n' 
#define int long long

struct node {
    int l, r, p, w;
};

const int N = 2e5;
int n;
vector<int> adj[N];
vector<node> nodes;
vector<int> dp(N);
vector<int> vis(N);

int dfs(int u, int curr, int pcs) {
    curr += nodes[u].w;
    pcs |= (1 << nodes[u].p);

    if (!adj[u].size()) {
        if (pcs != ((1 << n) - 1)) return -1;
        else return curr;
    }

    int mx = -1;
    for (auto v : adj[u]) {
        mx = max(mx, dfs(v, curr, pcs));
    }

    return mx;
}

void solve () {
	cin >> n;
    for (int i=0; i < n; i++) {
        int k; cin >> k;
        for (int j=0; j < k; j++) {
            int c, f, w; cin >> c >> f >> w;
            node v;
            v.l = c;
            v.r = f;
            v.p = i;
            v.w = w;
            nodes.push_back(v);
        }
    }
    vector<int> top(nodes.size());

    for (int i=0; i < (int)nodes.size(); i++) {
        for (int j=0; j < (int)nodes.size(); j++) {
            node &a = nodes[i];
            node &b = nodes[j];
            if (a.r <= b.l) {
                adj[i].push_back(j);
            }
        }
    }

    int resp = -1;
    for (int i = 0; i < (int)nodes.size(); i++) {
        /* cout << "i -> " << dfs(i, 0, 0) << endl; */
        resp = max(resp, dfs(i, 0, 0));
    }

    /* cout << dfs(0, 0, 0) << endl; */

    cout << resp << endl;

}

signed main() {
    ios_base::sync_with_stdio(0);cin.tie(0);
    solve();
    return 0;
}

